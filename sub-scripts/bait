#!/bin/bash

cleanup() {
  echo "It's a trap!"
}

# How does trap work ?
trap cleanup EXIT

help-page() {
  echo ""
  echo "usage: bait [<command>] [flag] [<args>]"
  echo ""
  echo -e "\tThese are the commands used with 'bait':"
  echo -e "\thelp | -h"
  echo -e "\tcatch|<empty>"
  echo -e "\trelease | -r"
  echo -e "\tgrab | -g"
  echo ""
}

catch() {
  fish=$(pwd)

  for dir in $BAIT_NET_CONTENT; do
    if [[ $dir == $fish ]]; then 
      echo "Already Catched"
      return
    fi
  done
  
  BAIT_NET_CONTENT="$BAIT_NET_CONTENT${fish} "
  BAIT_NET_SIZE=$((BAIT_NET_SIZE+1))
}

release() {
  BAIT_NET_CONTENT=""
  BAIT_NET_SIZE=0
}

grab() {
  escape_char=$(printf "\u1b")
  index=0
  jump=""
  
  if [[ $BAIT_NET_SIZE -eq 0 ]]; then echo "No Catchings"; return; fi

  tput sc # save cursor position
  
  while true; do
    pointer=0

    for dir in $BAIT_NET_CONTENT; do
      if [[ $pointer == $index ]]; then 
        echo -n "["
        echo -n "$dir"
        echo "]"
        jump=$dir
      else
        echo "$dir"
      fi
      pointer=$((pointer + 1))
    done
    
    read -rsn1 mode
    if [[ $mode == $escape_char ]]; then
      read -rsn2 mode
    fi

    case $mode in
      "[A") if [[ $index != 0 ]]; then index=$((index - 1)); else index=$((BAIT_NET_SIZE - 1)); fi ;;
      "[B") if [[ $index != $((BAIT_NET_SIZE - 1)) ]]; then index=$((index + 1)); else index=0; fi ;;
      "") break ;;
      *) >&2 ;;
    esac
    
    tput rc # return to saved cursor positon
    tput ed # clear below cursor 
  
    cd $jump
  done
}

bait() {
  case $1 in
    catch|'') echo "Catch $(pwd)"; catch ;;
    release|-r) release ;;
    grab|-g) grab ;;
    *) echo "Not a valid bait command"; help-page ;;
  esac
}

# bait $1
